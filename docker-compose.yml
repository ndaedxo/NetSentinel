services:
  # Core infrastructure
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: netsentinel-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_LOG4J_LOGGERS: "org.apache.zookeeper=ERROR"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: netsentinel-kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  valkey:
    image: valkey/valkey:7.2-alpine
    container_name: netsentinel-valkey
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: valkey-server --requirepass hybrid-detection-2024
    volumes:
      - valkey-data:/data
    healthcheck:
      test: ["CMD", "valkey-cli", "--no-auth-warning", "-a", "hybrid-detection-2024", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NetSentinel honeypot
  netsentinel:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: netsentinel-honeypot
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      valkey:
        condition: service_healthy
    ports:
      - "21:21"    # FTP
      - "22:22"    # SSH
      - "23:23"    # Telnet
      - "80:80"    # HTTP
      - "443:443"  # HTTPS
      - "3307:3306" # MySQL (mapped to 3307 to avoid conflict)
    volumes:
      - ./hybrid-data/opencanary/config/opencanary.conf:/root/.opencanary.conf
      - opencanary-logs:/var/log/opencanary
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - VALKEY_HOST=valkey
      - VALKEY_PORT=6379
      - VALKEY_PASSWORD=hybrid-detection-2024

  # Event processor
  event-processor:
    build:
      context: .
      dockerfile: Dockerfile.event-processor
    container_name: netsentinel-event-processor
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      valkey:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - VALKEY_HOST=valkey
      - VALKEY_PORT=6379
      - VALKEY_PASSWORD=hybrid-detection-2024
      - FIREWALL_BLOCK_THRESHOLD=7.0
      - ENTERPRISE_DB_ENABLED=true
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=netsentinel-token-2024
      - INFLUXDB_ORG=netsentinel
      - INFLUXDB_BUCKET=netsentinel-metrics
      - ALERTING_ENABLED=true
      - SMTP_SERVER=smtp.gmail.com
      - SMTP_PORT=587
      - ALERT_FROM_EMAIL=alerts@netsentinel.local
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL:-}
    # Privileged access for firewall management and packet capture
    privileged: true
    cap_add:
      - NET_ADMIN
      - NET_RAW
    # Network host mode for packet capture on all interfaces
    network_mode: host
    volumes:
      # Mount host iptables for firewall management
      - /var/lib/iptables:/var/lib/iptables
      - /etc/iptables:/etc/iptables

  # Monitoring and management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: netsentinel-kafka-ui
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: netsentinel-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: netsentinel-redis-commander
    restart: unless-stopped
    depends_on:
      valkey:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: valkey:valkey:6379:0:hybrid-detection-2024

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: netsentinel-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  influxdb:
    image: influxdb:2.7
    container_name: netsentinel-influxdb
    restart: unless-stopped
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=netsentinel2024!
      - DOCKER_INFLUXDB_INIT_ORG=netsentinel
      - DOCKER_INFLUXDB_INIT_BUCKET=netsentinel-metrics
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=netsentinel-token-2024
    ports:
      - "8086:8086"
    volumes:
      - influxdb-data:/var/lib/influxdb2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: netsentinel-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./hybrid-data/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: netsentinel-grafana
    restart: unless-stopped
    depends_on:
      prometheus:
        condition: service_started
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=hybrid-admin-2024
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana

volumes:
  zookeeper-data:
  kafka-data:
  valkey-data:
  opencanary-logs:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
  influxdb-data: