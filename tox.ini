[tox]
envlist = py39, py310, py311, lint, typecheck, security, docs
skip_missing_interpreters = true

[testenv]
deps = -r requirements-dev.txt
passenv =
    HOME
    CI
    NETSENTINEL_*
    REDIS_*
    KAFKA_*
    SPLUNK_*
    ELASTICSEARCH_*
    SYSLOG_*
    SDN_*
    OPENDLIGHT_*
    ONOS_*
    RYU_*
setenv =
    PYTHONPATH = {toxinidir}
    PYTHONUNBUFFERED = 1
commands =
    pytest netsentinel/tests/unit/ -v --cov=netsentinel --cov-report=term-missing --cov-report=xml --tb=short

[testenv:py39]
basepython = python3.9

[testenv:py310]
basepython = python3.10

[testenv:py311]
basepython = python3.11

[testenv:lint]
deps = -r requirements-dev.txt
commands =
    flake8 netsentinel/
    black --check netsentinel/
    isort --check-only netsentinel/
    pylint netsentinel/ --rcfile=pyproject.toml

[testenv:typecheck]
deps = -r requirements-dev.txt
commands = mypy netsentinel/

[testenv:security]
deps = -r requirements-dev.txt
commands =
    bandit -r netsentinel/
    safety check

[testenv:format]
deps = -r requirements-dev.txt
commands =
    black netsentinel/
    isort netsentinel/

[testenv:docs]
deps = -r requirements-dev.txt
changedir = docs
commands = sphinx-build -b html . _build/html

[testenv:integration]
deps = -r requirements-dev.txt
passenv =
    HOME
    CI
    REDIS_HOST
    REDIS_PORT
    KAFKA_BOOTSTRAP_SERVERS
setenv =
    PYTHONPATH = {toxinidir}
    INTEGRATION_TEST = 1
commands = pytest netsentinel/tests/integration/ -v --tb=short

[testenv:e2e]
deps = -r requirements-dev.txt
passenv =
    HOME
    CI
    NETSENTINEL_API_URL
setenv =
    PYTHONPATH = {toxinidir}
    E2E_TEST = 1
commands = pytest tests/e2e/ -v --tb=short

[testenv:performance]
deps = -r requirements-dev.txt
setenv =
    PYTHONPATH = {toxinidir}
    PERFORMANCE_TEST = 1
commands = pytest netsentinel/tests/unit/ -k "performance" -v --tb=short

[testenv:smoke]
deps = -r requirements-dev.txt
setenv =
    PYTHONPATH = {toxinidir}
    SMOKE_TEST = 1
commands =
    python -c "import netsentinel; print('Import test passed')"
    pytest netsentinel/tests/unit/ -k "smoke" -v --tb=short

[testenv:coverage]
deps = -r requirements-dev.txt
setenv =
    PYTHONPATH = {toxinidir}
commands =
    pytest netsentinel/tests/ --cov=netsentinel --cov-report=html --cov-report=term-missing
    coverage report --fail-under=80

[testenv:playwright]
deps = -r requirements-dev.txt
passenv =
    HOME
    CI
    NETSENTINEL_API_URL
setenv =
    PYTHONPATH = {toxinidir}
commands = pytest tests/playwright/ -v --tb=short

[testenv:docker]
deps = -r requirements-dev.txt
setenv =
    PYTHONPATH = {toxinidir}
    DOCKER_TEST = 1
commands =
    docker-compose build event-processor
    docker-compose run --rm event-processor pytest tests/unit/ -v --tb=short

[testenv:k8s]
deps = -r requirements-dev.txt
setenv =
    PYTHONPATH = {toxinidir}
    K8S_TEST = 1
commands =
    kubectl apply --dry-run=client -f k8s/
    helm template test helm/netsentinel/ --dry-run

[testenv:release]
deps = -r requirements-dev.txt
setenv =
    PYTHONPATH = {toxinidir}
commands =
    python -m build
    twine check dist/*
    safety check
    bandit -r netsentinel/
